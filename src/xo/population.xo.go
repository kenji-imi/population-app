// Package xo contains the types for schema 'populationdb'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// Population represents a row from 'populationdb.population'.
type Population struct {
	ID               int    `json:"id"`                // id
	PrefCode         string `json:"pref_code"`         // pref_code
	PrefName         string `json:"pref_name"`         // pref_name
	EraName          string `json:"era_name"`          // era_name
	EraYear          int    `json:"era_year"`          // era_year
	Year             int    `json:"year"`              // year
	Population       int    `json:"population"`        // population
	MalePopulation   int    `json:"male_population"`   // male_population
	FemalePopulation int    `json:"female_population"` // female_population

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Population exists in the database.
func (p *Population) Exists() bool {
	return p._exists
}

// Deleted provides information if the Population has been deleted from the database.
func (p *Population) Deleted() bool {
	return p._deleted
}

// Insert inserts the Population to the database.
func (p *Population) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO populationdb.population (` +
		`pref_code, pref_name, era_name, era_year, year, population, male_population, female_population` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, p.PrefCode, p.PrefName, p.EraName, p.EraYear, p.Year, p.Population, p.MalePopulation, p.FemalePopulation)
	res, err := db.Exec(sqlstr, p.PrefCode, p.PrefName, p.EraName, p.EraYear, p.Year, p.Population, p.MalePopulation, p.FemalePopulation)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	p.ID = int(id)
	p._exists = true

	return nil
}

// Update updates the Population in the database.
func (p *Population) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE populationdb.population SET ` +
		`pref_code = ?, pref_name = ?, era_name = ?, era_year = ?, year = ?, population = ?, male_population = ?, female_population = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, p.PrefCode, p.PrefName, p.EraName, p.EraYear, p.Year, p.Population, p.MalePopulation, p.FemalePopulation, p.ID)
	_, err = db.Exec(sqlstr, p.PrefCode, p.PrefName, p.EraName, p.EraYear, p.Year, p.Population, p.MalePopulation, p.FemalePopulation, p.ID)
	return err
}

// Save saves the Population to the database.
func (p *Population) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Delete deletes the Population from the database.
func (p *Population) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM populationdb.population WHERE id = ?`

	// run query
	XOLog(sqlstr, p.ID)
	_, err = db.Exec(sqlstr, p.ID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// PopulationByID retrieves a row from 'populationdb.population' as a Population.
//
// Generated from index 'population_id_pkey'.
func PopulationByID(db XODB, id int) (*Population, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pref_code, pref_name, era_name, era_year, year, population, male_population, female_population ` +
		`FROM populationdb.population ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	p := Population{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&p.ID, &p.PrefCode, &p.PrefName, &p.EraName, &p.EraYear, &p.Year, &p.Population, &p.MalePopulation, &p.FemalePopulation)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
